@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": false,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": false,
    "cutInterfaceStructures": false,
    "cutDataStructures": false,
    "cutGetterAndSetter": false,
    "cutConstructors": false
  },
  "graphTraversal": {
    "forwardDepth": 3,
    "backwardDepth": 3,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": false,
    "showMethodReturnType": true,
    "showPackageLevels": 3,
    "showDetailedClassStructure": true
  },
  "rootClass": "Logica.ClienteLogica",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_1068799386 { 
   	label=modelo
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   Cliente1068799386[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Cliente</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   direccion: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   dni: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   estadoServicio: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   fechaInstalacion: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   idUsuario: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   nombre: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   telefono: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   tieneMedidor: String [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ getDireccion(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ getDni(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ getEstadoServicio(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ getFechaInstalacion(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ getIdUsuario(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getNombre(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ getTelefono(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ getTieneMedidor(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ setDireccion(direccion)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setDni(dni)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setEstadoServicio(estadoServicio)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setFechaInstalacion(fechaInstalacion)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setIdUsuario(idUsuario)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setNombre(nombre)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setTelefono(telefono)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setTieneMedidor(tieneMedidor)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_2013468445 { 
   	label=Logica
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   ClienteLogica2013468445[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ClienteLogica</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   clienteDAO: ClienteDAO [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ ClienteLogica()</TD></TR>
<TR><TD ALIGN="LEFT" >+ actualizarCliente(cliente): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ agregarCliente(cliente): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ eliminarCliente(idCliente): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ obtenerClientePorDniOId(idODni): Cliente</TD></TR>
<TR><TD ALIGN="LEFT" >+ obtenerClientePorId(idUsuario): Cliente</TD></TR>
<TR><TD ALIGN="LEFT" >+ obtenerClientes(): List&lt;Cliente&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ obtenerIdUsuarioPorDniOId(idODni): int</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_67442 { 
   	label=DAO
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   ClienteDAO67442[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ClienteDAO</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ actualizarCliente(cliente): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ eliminarCliente(idCliente): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ insertarCliente(cliente): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ obtenerClientePorDniOId(idODni): Cliente</TD></TR>
<TR><TD ALIGN="LEFT" >+ obtenerClientePorId(idUsuario): Cliente</TD></TR>
<TR><TD ALIGN="LEFT" >+ obtenerIdPorDniOId(idODni): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ obtenerTodosLosClientes(): List&lt;Cliente&gt;</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

ConexionSQL67442[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ConexionSQL</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ closeConnection(connection)</TD></TR>
<TR><TD ALIGN="LEFT" >+ getConexion(): Connection</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

'edges    
ClienteLogica2013468445 -> ClienteDAO67442[label="clienteDAO
[0..1]"];
    
}
@enduml